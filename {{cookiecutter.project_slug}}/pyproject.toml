[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ cookiecutter.project_slug }}"
version = "0.0.1"
description = "{{ cookiecutter.project_short_description }}"
license = "LicenseRef-Proprietary-FAR"
readme = "README.md"
authors = [
    {name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}"},
]
requires-python = ">= {{ cookiecutter.python_version }}"

dependencies = [
    "names_generator",
    "pandas",
    "torch",
    "torchvision",
    "typeapi==2.1.2",  # needed so that pip does not complain about conflicting reqs
    "wandb",
    "farconf@git+https://github.com/AlignmentResearch/farconf.git",
]

[project.urls]
{% if cookiecutter.github_organization_name == "" -%}
repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
{% else -%}
repository = "https://github.com/{{ cookiecutter.github_organization_name }}/{{ cookiecutter.project_slug }}"
{% endif %}
# We keep the dev dependencies here instead of in the
# project optional dependencies. This is so that they're still installed
# by default with `uv sync`, but are not shipped with the package.
[dependency-groups]
dev = [
    # Things we want to put a lower bound on
    "mkdocs-material>=9.6.0",
    "pre-commit>=4.0.0",
    "pytest>=8.3.0",
    "ruff>=0.9.7",
    # Things we just want the latest version of
    "mkdocstrings[python]",
    "mkdocs-table-reader-plugin",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
    "pyright",
    "pymdown-extensions",
    "pytest-cov",
]

[tool.setuptools.packages.find]
namespaces = false

[tool.pyright]
venvPath = "."
venv = ".venv"
include = ["{{ cookiecutter.package_name }}"]
pythonVersion = "{{ cookiecutter.python_version }}"

[tool.ruff]
target-version = "py{{ cookiecutter.python_version.replace('.', '') }}"

[tool.ruff.lint]
# By default, enable all the lint rules.
# Add to the ignore list below if you don't want some rules.
# If you need some ignores for certain modules, see
# tool.ruff.lint.per-file-ignores below.
# For individual ignore cases, prefer inline `# noqa`s within the code.
select = ["ALL"]
ignore = [
    "COM812",   # flake8 missing trailing comma, formatter handles
    "ISC001",   # Implicit string concatenation
    "ANN",      # Type hints related, let mypy handle these.
    "D",        # Docstrings related, way too strict to our taste
    "RUF007",   # zip is idiomatic, this is a dumb check
    "RET505",   # Else after return, makes a lot of false positives
    "E501",     # Line too long, this is autoformatted
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",     # "Use of `assert` detected"
    "ARG",      # "Unused function argument". Fixtures are often unused.
    "S105",     # "Possible hardcoded password".
]
"scripts/**" = [
    "INP001",   # "Scripts are not part of a package."
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
